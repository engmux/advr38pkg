// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// count_between
IntegerVector count_between(const NumericVector& x, const NumericVector& breaks);
RcppExport SEXP _advr38pkg_count_between(SEXP xSEXP, SEXP breaksSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type breaks(breaksSEXP);
    rcpp_result_gen = Rcpp::wrap(count_between(x, breaks));
    return rcpp_result_gen;
END_RCPP
}
// random_walk_neg_prop
double random_walk_neg_prop(double N);
RcppExport SEXP _advr38pkg_random_walk_neg_prop(SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(random_walk_neg_prop(N));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_advr38pkg_count_between", (DL_FUNC) &_advr38pkg_count_between, 2},
    {"_advr38pkg_random_walk_neg_prop", (DL_FUNC) &_advr38pkg_random_walk_neg_prop, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_advr38pkg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
